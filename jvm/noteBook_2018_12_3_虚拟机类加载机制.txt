1.概述
    1.提问
        1.虚拟机如何加载这些Class文件？
        2.Class文件中的信息进入到虚拟机后会发生什么变化？
    2.虚拟机的类加载机制
        1.虚拟机把描述类的数据从Class文件加载到内存
        2.并对数据进行 @校验、 @转换解析和  @初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制

    3.编译时进行连接的语言有哪些？

    4.Java同这些语言的区别,优缺点是什么？
        1. 区别：在Java语言里面，类型的加载、 连接和初始化过程都是在程序运行期间完成的
        2. 缺点：策略虽然会令类加载时稍微增加一些性能开销，
        3. 优点：会为Java应用程序提供高度的灵活性，Java里天生可以动态扩展的语言特性就是依赖运行期动态加载和动态连接这个特点实现的。
        4. 优点应用举例：
                1.如果编写一个面向接口的应用程序，可以等到运行时再指定其实际的实现类；
                2.用户可以通过Java预定义的和自定义类加载器，让一个本地的应用程序可以
                  在运行时从网络或其他地方加载一个二进制流作为程序代码的一部分，这种组
                  装应用程序的方式目前已广泛应用于Java程序之中
                3. 从最基础的Applet、 JSP到相对复杂的OSGi技术，都使用了Java语言运行期类加载的特性

    5.本章语言表达规约
        1.第一，每个Class文件都有可能代表着Java语言中的一个类或接口，后文中直接对“类”的描述都包括了
          类和接口的可能性，而对于类和接口需要分开描述的场景会特别指明
        2.第二，“Class文件”应当是一串二进制的字节流，无论以何种形式存在都可以，并非一定是磁盘

2.类加载的时机
    1.类的生命周期：加载到虚拟机内存中开始，到卸载出内存为止，包括

        1.加载（Loading）
        2.验证（Verification）（属于连接过程之一）
        3.准备（Preparation）（属于连接过程之一）
        4.解析（Resolution） （属于连接过程之一）
        5.初始化（Initialization）
        6.使用（Using）
        7.卸载（Unloading）
     7个阶段，七个阶段发生顺序如图：imgs/L_V_P_R_I_U_U.png

     2.7个阶段发生顺序及特点
        1.加载、 验证、 准备、 初始化和卸载这5个阶段的顺序是确定的，！！！类的加载过程必须按照这种顺序
          @@按部就班地开始@@

        2.解析阶段则不一定：它在某些情况下可以在初始化阶段之后再开始，这是为了支持Java语言的运行时绑定
          （也称为动态绑定或晚期绑定）。

       【ps,注意，这里笔者写的是  !!!!按部就班地“开始”，而不是按部就班地“进行”或“完成”，强调这点是因
         为这些阶段通常都是互相交叉地混合式进行的，通常会在一个阶段执行的过程中调用、 激活另外一个阶段。】

     3.类加载过程中哪个阶段一马当先？
        加载？Java虚拟机规范中并没有进行强制约束，这点可以交给虚拟机的具体实现来自由把握

     4.初始化阶段，虚拟机规范则是严格规定了有且只有5种情况必须立即对类进行“初始化”，如下：
        1）遇到new、 getstatic、 putstatic或invokestatic这4条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。
           生成这4条指令的最常见的Java代码场景是：

            1.使用new关键字实例化对象的时候、 new.
            2.读取或设置一个类的静态字段（被final修饰、 已在编译期把结果放入常量池的静态字段除外,这种是编译时常量）的时候,
              即会用到getstatic,putstatic
            3.以及调用一个类的静态方法的时候,invokestatic

        2）使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要先触发其初始化


        3）当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。

        4）当虚拟机启动时，用户需要指定一个要执行的主类（包含main（）方法的那个类），虚拟机会先初始化这个主类。

        5）当使用JDK 1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果
           REF_getStatic、 REF_putStatic、 REF_invokeStatic的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，
           则需要先触发其初始化。

        【ps,对于这5种会触发类进行初始化的场景，虚拟机规范中使用了一个很强烈的限定语：“有且只有”，
            这5种场景中的行为称为对一个类进行主动引用,除此之外，所有引用类的方式都不会触发初始化,
            称为被动引用】

     5.被动引用举例
        1.对于静态字段，只有直接定义这个字段的类才会被初始化，通过子类来引用父类中定义的静态字段，
          只会触发父类的初始化而不会触发子类的初始化
            1.关于这期间是否会触发子类的加载和验证的几个非常有趣的特点
                1.在虚拟机规范中并未明确规定，这点取决于虚拟机的具体实现
                2.对于Sun HotSpot虚拟机
                  来说，可通过-XX：+TraceClassLoading参数观察到此操作会导致子类的加载
                  .....
                  Loaded xxx.xx.x from ss/ss/ss.....
                  ....
        2.使用类创建一个一维数组：Class_a[] arr = new Class_a[N];
            1.出现几个有趣的特点
                1.里面触发了另外一个名为“[Lorg.fenixsoft.classloading.Class_a”的类的初始化阶段
                2.该类代表了一个元素类型org.fenixsoft.classloading.Class_a的一维数组
                3.用户可直接使用的只有被修饰为public的length属性和clone（）方法

        3.引用编译阶段常量，如在Class_other_1中引用如下类：

            public class ConstClass{
                static{
                    System.out.println("ConstClass init！");
                }
                public static final String HELLOWORLD="hello world";
            }
          中的常量HELLOWORLD时，编译阶段通过常量传播优化已经将此常量的值“hello world”存储到了Class_other_1类的常量池中
          【当使用javap查看Class_other_1的字节码时，发现hello world已经在常量池中了】

     6.接口与类的加载过程的区别，与共同点
        1.接口也有初始化过程，这点与类是一致的
        2.类中可以有静态语句块“static{}”来输出初始化信息，而接口中不能使用“static{}”语句块，
          但编译器仍然会为接口生成“＜clinit＞（）”类构造器[2]，用于初始化接口中所定义的成员变量。
        3.接口不要求父类都完成初始化，而类则要求。

3.类加载的过程，加载、 验证、 准备、 解析和初始化
    1.加载,“加载”是“类加载”（Class Loading）过程的一个阶段
        1.加载过程,在加载阶段，虚拟机需要完成以下3件事情：
            1）获取字节流：通过一个类的全限定名来获取定义此类的二进制字节流。
               获取途径多样，例如：
                1.从ZIP包中读取，这很常见，最终成为日后JAR、 EAR、 WAR格式的基础

                2.从网络中获取，这种场景最典型的应用就是Applet。

                3.动态代理生成

                4.由其他文件生成，典型场景是JSP应用，即由JSP文件生成对应的Class类

                5.从数据库中读取，这种场景相对少见些，例如有些中间件服务器（如SAP Netweaver）
                  可以选择把程序安装到数据库中来完成程序代码在集群间的分发

                 ......

            2）转化为方法区运行时数据结构：将这个字节流所代表的  @@静态存储结构@@  转化为方法区的运行时数据结构。

            3）生成类访问入口：在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。

        2.加载一个数组类与加载一个非数组类的区别以及自身特点
            1.数组类本身不通过类加载器创建，它是由Java虚拟机直接创建的。

            2.但数组类与类加载器仍然有很密切的关系，因为数组类的元素类型（ElementType，指的是数组去掉所有维度的类型）最终是要靠类加载器去创建

            3.一个数组类（下面简称为C）创建过程就遵循以下规则：
                1.如果数组的组件类型（元素类型）是引用类型，那就递归采用本节中定义的非数组类加载过程去加载这个组件类型，
                  数组C将在加载该组件类型的类加载器的类名称空间上被标识（这点很重要，一个类必须与类加载器一起确定唯一性）。

                2.如果数组的组件类型不是引用类型（例如int[]数组），Java虚拟机将会把数组C标记为与引导类加载器关联。
                  数组类的可见性与它的组件类型的可见性一致，如果组件类型不是引用类型，那数组类的可见性将默认为public。

        3.加载过程完成后的变化
            1.虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中
              方法区中的数据存储格式由虚拟机实现自行定义，虚拟机规范未规定此区域的具体数据结构。

            2.然后在内存中实例化一个java.lang.Class类的对象（并没有明确规定是在Java堆中，对
              于HotSpot虚拟机而言，Class对象比较特殊，它虽然是对象，但是存放在方法区里面），这
              个对象将作为程序访问方法区中的这些类型数据的外部接口

        4.加载过程与连接阶段是交叉进行的，但这两个阶段的开始时间仍然保持着固定的先后顺序

    2.验证
        1.定义及目的
            1.验证是连接阶段的第一步
            2.为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全

        2.java语言安全性描述，拒绝编译java代码的情形
            1.使用纯粹的Java代码无法做到诸如访问数组边界以外的数据、

            2.将一个对象转型为它并未实现的类型、

            3.跳转到不存在的代码行之类的事情，如果这样做了，编译器将拒绝编译。

        3.字节码验证的必要性，
            1.Class文件并不一定要求用Java源码编译而来，可以使用任何途径产生，甚至包括用十六进制编辑器直接编
              写来产生Class文件。在字节码语言层面上，上述Java代码无法做到的事情都是可以实现的，
              至少语义上是可以表达出来的
               【ps:再次证明了字节码比java代码强大】。

            2.虚拟机如果不检查输入的字节流，对其完全信任的话，很可能会因为载入了有害的字节流而导致系统崩溃，
              所以验证是虚拟机对自身保护的一项重要工作。

        4.验证所带来的goods or bads

            1.验证阶段是非常重要的，这个阶段是否严谨，直接决定了Java虚拟机是否能承受恶意代码的攻击

            2.从执行性能的角度上讲，验证阶段的工作量在虚拟机的类加载子系统中又占了相当大的一部分。
                1.《Java虚拟机规范（第2版）》 对这个阶段的限制、 指导还是比较笼统的，
                2. 直到2011年发布的《Java虚拟机规范（Java SE 7版）》 ，大幅增加了描述验证过程的篇幅，这时约束和验证规则才变得具体起来。
            3.《Java虚拟机规范（Java SE 7版）》，验证阶段大致上会完成下面4个阶段的检验动作：
                1.文件格式验证、
                    第一阶段要验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理。 这一阶段可能包括下面这些验证点：
                        1.是否以魔数0xCAFEBABE开头。

                        2.主、 次版本号是否在当前虚拟机处理范围之内。

                        3.常量池的常量中是否有不被支持的常量类型（检查常量tag标志）。

                        4.指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量。

                        5.CONSTANT_Utf8_info型的常量中是否有不符合UTF8编码的数据。

                        6.Class文件中各个部分及文件本身是否有被删除的或附加的其他信息。

                        ……
                    实际上，第一阶段的验证点还远不止这些，上面这些只是从HotSpot虚拟机源码[1]中摘抄
                    的一小部分内容，该验证阶段的主要目的是保证输入的字节流能正确地解析并存储于方法区之内
                    ，格式上符合描述一个Java类型信息的要求。 这阶段的验证是基于二进制字节流进行
                    的，只有通过了这个阶段的验证后，字节流才会进入内存的方法区中进行存储，所以后面的
                    3个验证阶段全部是基于方法区的存储结构进行的，不会再直接操作字节流

                2.元数据验证
                    第二阶段是对字节码描述的信息进行语义分析，以保证其描述的信息符合Java语言规范的要求，这个阶段可能包括的验证点如下：
                        1.这个类是否有父类（除了java.lang.Object之外，所有的类都应当有父类）。
                        2.这个类的父类是否继承了不允许被继承的类（被final修饰的类）。
                        3.如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法。
                        4.类中的字段、 方法是否与父类产生矛盾（例如覆盖了父类的final字段，或者出现不符合规则的方法重载，
                          例如方法参数都一致，但返回值类型却不同等）。
                        ……
                        第二阶段的主要目的是对类的元数据信息进行语义校验，保证不存在不符合Java语言规范的元数据信息
                3.字节码验证
                    第三阶段是整个验证过程中最复杂的一个阶段，主要目的是通过数据流和控制流分析，确定程序语义是合法的、 符合逻辑的。
                    在第二阶段对元数据信息中的数据类型做完校验后，这个阶段将对类的方法体进行校验分析，
                    保证被校验类的方法在运行时不会做出危害虚拟机安全的事件，例如：
                        1.保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现类似这样的情况：
                            在操作栈放置了一个int类型的数据，使用时却按long类型来加载入本地变量表中。

                        2.保证跳转指令不会跳转到方法体以外的字节码指令上。

                        3.保证方法体中的类型转换是有效的，例如可以把一个子类对象赋值给父类数据类型，这是安全的，但是把父类对象赋值给子类数据类型，
                          甚至把对象赋值给与它毫无继承关系、 完全不相干的一个数据类型，则是危险和不合法的。
                          ……

                4.字节码验证不是万能的，因为无法判断程序是否可以在有限时间内完成
                    如果一个类方法体的字节码没有通过字节码验证，那肯定是有问题的；但如果一个方法
                    体通过了字节码验证，也不能说明其一定就是安全的。 即使字节码验证之中进行了大量的检
                    查，也不能保证这一点。 这里涉及了离散数学中一个很著名的问题“Halting Problem”[2]：通俗
                    一点的说法就是，通过程序去校验程序逻辑是无法做到绝对准确的——不能通过程序准确地
                    检查出程序是否能在有限的时间之内结束运行。

                5.符号引用验证。
                    最后一个阶段的校验发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作将
                    在连接的第三阶段——解析阶段中发生。 符号引用验证可以看做是对类自身以外（常量池中
                    的各种符号引用）的信息进行匹配性校验，通常需要校验下列内容：
                        1.符号引用中通过字符串描述的全限定名是否能找到对应的类。

                        2.在指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段。

                        3.符号引用中的类、 字段、 方法的访问性（private、 protected、 public、 default）是否可被
                          当前类访问。
                            ……


                    符号引用验证的目的是确保解析动作能正常执行，如果无法通过符号引用验证，那么将
                    会抛出一个java.lang.IncompatibleClassChangeError异常的子类，如
                    java.lang.IllegalAccessError、 java.lang.NoSuchFieldError、 java.lang.NoSuchMethodError等

    3.准备
        1.定义：准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。
        2.注意点：
                1.这里是类变量，不是实例变量
                2.这里所说的初始值“通常情况”下是数据类型的零值
                    例如
                        一个类变量的定义为：public static int value=123；那变量value在准备阶段过后的初始值为0而不是123，
                        因为这时候尚未开始执行任何Java方法，而把value赋值为123的putstatic指令是程序被编译后，存放于类构造器＜clinit＞（）方
                3.会有一些“特殊情况”：
                    如果类字段的字段属性表中存在ConstantValue属性，那在准备阶段变量value就会被初始化为ConstantValue属性所指定的值，
                    假设上面类变量value的定义变为： public static final int value=123；编译时Javac将会为value生成ConstantValue属性，
                    在准备阶段虚拟机就会根据ConstantValue的设置将value赋值为123


    4.解析
        定义：解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程
        符号引用：
            1.定义：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可
            2.JVM内存布局相关性：
                1.与JVM内存布局无关，引用的目标并不一定已经加载到内存中
                2.各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须都是一致的,
                  ，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中
            3.举例
                符号引用在前一章讲解Class文件格式的时候已经出现过多次，在Class文件中它以CONSTANT_Class_info、
                CONSTANT_Fieldref_info、 CONSTANT_Methodref_info等类型的常量出现
        直接引用：
            1.定义：直接引用可以是直接指向目标的指针、 相对偏移量或是一个能间接定位到目标的句柄。
            2.JVM内存布局相关性：
                1.直接引用是和虚拟机实现的内存布局相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。
                2.如果有了直接引用，那引用的目标必定已经在内存中存在

        解析发生的具体时间:
            1.虚拟机规范之中并未规定解析阶段发生的具体时间，不确定

            2.只要求了在执行anewarray、
                checkcast、 getfield、 getstatic、 instanceof、 invokedynamic、 invokeinterface、 invokespecial、
                invokestatic、 invokevirtual、 ldc、 ldc_w、 multianewarray、 new、 putfield和putstatic这16个用于
                操作符号引用的字节码指令之前，先对它们所使用的符号引用进行解析。

            3.具体时间不确定带来的优点
                1.虚拟机实现可以根据需要来判断到底是在类被加载器加载时就对常量池中的符号引用进行解析，还是等到
                  一个符号引用将要被使用前才去解析它
                【ps:是懒加载还是即时加载】

        JVM对于同一个符号引用的处理特点
            非invokedynamic指令
                1.对第一次解析的结果进行缓存（在运行时常量池中记录直接引用，并把常量标识为已解析状态）从而避免解析动作重复进行。

                2.第一次成功，后续都成功；第一次失败，后续皆失败
                    无论是否真正执行了多次解析动作，虚拟机需要保证的是在同一个实体中，如果一个符号引用之前已经被成功解析过，那么后续的引用解
                    析请求就应当一直成功；同样的，如果第一次解析失败了，那么其他指令对这个符号的解析请求也应该收到相同的异常。

            invokedynamic指令
                1.当碰到某个前面已经由invokedynamic指令触发过解析的符号引用时，并不意味着这个解析结果对于其他invokedynamic指令也同样生效。
                  因为invokedynamic指令的目的本来就是用于动态语言支持（目前仅使用Java语言不会生成这条字节码指令），
                  它所对应的引用称为“动态调用点限定符”（Dynamic Call Site Specifier），这里“动态”的含义就是必须等到程序实际运行到这条指令的时候，解析动作才
                  能进行。 相对的，其余可触发解析的指令都是“静态”的，可以在刚刚完成加载阶段，还没有开始执行代码时就进行解析。

        解析类型：
            1.类或接口解析、
                1.假设当前代码所处的类为D，如果要把一个从未解析过的符号引用N解析为一个类或接口C的直接引用，那虚拟机完成整个解析的过程需要以下3个步骤：

                    1）C为非数组时解析
                           把代表N的全限定名传递给D的类加载器去加载这个类C。
                           在加载过程中，由于元数据验证、 字节码验证的需要，又可能触发其他相关
                           类的加载动作，例如加载这个类的父类或实现的接口。 一旦这个加载过程出现了任何异常，解析过程就宣告失败。

                    2）C为数组类型，并且数组的元素类型为对象
                           按照第1点的规则加载数组元素类型。 如果N的描述符如前面所假设的形式，例如需要加载的元素类型就是“java.lang.Integer”，
                           接着由虚拟机生成一个代表此数组维度和元素的数组对象。

                    【1），2）是将符号引用解析成一个Class的过程】

                    3）确认访问权限
                        如果上面的步骤没有出现任何异常，那么C在虚拟机中实际上已经成为一个有效的类
                       或接口了，但在解析完成之前还要进行符号引用验证，确认D是否具备对C的访问权限。 如
                       果发现不具备访问权限，将抛出java.lang.IllegalAccessError异常
            2.字段解析、
                要解析一个未被解析过的字段符号引用，首先将会对字段表内class_index[2]项中索引的
                CONSTANT_Class_info符号引用进行解析，也就是字段所属的类或接口的符号引用。 如果在
                解析这个类或接口符号引用的过程中出现了任何异常，都会导致字段符号引用解析的失败。
                如果解析成功完成，那将这个字段所属的类或接口用C表示，虚拟机规范要求按照如下步骤
                对C进行后续字段的搜索。
                1）如果C本身就包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段
                的直接引用，查找结束。
                2）否则，如果在C中实现了接口，将会按照继承关系从下往上递归搜索各个接口和它的
                父接口，如果接口中包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段
                的直接引用，查找结束。
                3）否则，如果C不是java.lang.Object的话，将会按照继承关系从下往上递归搜索其父
                类，如果在父类中包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段的
                直接引用，查找结束。
                4）否则，查找失败，抛出java.lang.NoSuchFieldError异常。
                如果查找过程成功返回了引用，将会对这个字段进行权限验证，如果发现不具备对字段
                的访问权限，将抛出java.lang.IllegalAccessError异常
            3.类方法解析、
            4.接口方法解析、
            5.方法类型解析、
            6.方法句柄解析
            7.调用点限定符解析
