背景介绍
    10多年时间过去了，今天的计算机仍然只能识别0和1，但由于最近10年内虚拟机以及大量建立在虚拟机之上的程
    序语言如雨后春笋般出现并蓬勃发展，将我们编写的程序编译成二进制本地机器码（Native Code）已不再是唯一的选择，
    越来越多的程序语言选择了与  @操作系统和机器指令集无关的、 @平台中立  的格式作为程序编译后的存储格式
    （PS:字节码作为中立格式，最终被翻译成本地部署机器的native code 是由虚拟机来完成的)

关于"无关性"要点总结
    1.一次编写，到处运行（Write Once,Run Anywhere）,Sun公司以及其他虚拟机提供商发布了许多可以运行在
      @各种硬件架构不同平台  上的虚拟机，这些虚拟机都可以载入和执行  @同一种平台无关的字节码  ，从而实现了程序的
      “一次编写，到处运行”

    2.各种不同平台的虚拟机与所有平台都统一使用的  @程序存储格式——字节码（ByteCode） 是构成平台无关性的基石

    3.本节标题中刻意省略了“平台”二字，那是因为笔者注意到虚拟机的另外一种中立特性——语言无关性正越来越被开发者所重视

    4.@Java语言规范    和    @Java虚拟机规范

    5.@语言中立特性  在Java虚拟机发展到JDK 1.7～1.8的时候，被JVM设计者通过JSR-292基本兑现

    6.Clojure、 Groovy、 JRuby、 Jython、 Scala都可在java虚拟机 上执行
        【@由各自的编译器编译成字节码 .class文件，然后再由java虚拟机执行】
        【未来展望：Java虚拟机语言无关性能否超越平台无关性】

    7.语言无关性基础 -----  @虚拟机  和  @字节码存储格式
        7.1 Java虚拟机<===========>字节码，不考虑语言来源是否是Java
        7.2 出于安全考虑，Java虚拟机规范要求在Class文件中使用许多  @强制性的语法和结构化约束

    8.字节码描述能力强于Java语言，能Java所不能，为其他语言实现提供基础
          Java语言中的各种变量、 关键字和运算符号的语义最终都是由多条字节码命令组合而成的，
          因此字节码命令所能提供的语义描述能力肯定会比Java语言本身更加强大.因此，
          有一些Java语言本身无法有效支持的语言特性不代表字节码本身无法有效支持，这也为其他语言
          实现一些有别于Java的语言特性提供了基础。